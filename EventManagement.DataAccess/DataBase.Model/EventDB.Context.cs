//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventManagement.DataAccess.DataBase.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activite> Activites { get; set; }
        public virtual DbSet<ActivityTPYE> ActivityTPYES { get; set; }
        public virtual DbSet<AdminInfo> AdminInfoes { get; set; }
        public virtual DbSet<AppDownload> AppDownloads { get; set; }
        public virtual DbSet<AttendeeGroup> AttendeeGroups { get; set; }
        public virtual DbSet<Attende> Attendes { get; set; }
        public virtual DbSet<AttendesEvent> AttendesEvents { get; set; }
        public virtual DbSet<BookMark> BookMarks { get; set; }
        public virtual DbSet<ChannelUser> ChannelUsers { get; set; }
        public virtual DbSet<ChatChannel> ChatChannels { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<DocumentFavourite> DocumentFavourites { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventInfo> EventInfoes { get; set; }
        public virtual DbSet<EventLocationDetail> EventLocationDetails { get; set; }
        public virtual DbSet<Exhibitor> Exhibitors { get; set; }
        public virtual DbSet<ExhibitorsEvent> ExhibitorsEvents { get; set; }
        public virtual DbSet<FloorMapLocation> FloorMapLocations { get; set; }
        public virtual DbSet<FloorMapping> FloorMappings { get; set; }
        public virtual DbSet<FloorRegionMapping> FloorRegionMappings { get; set; }
        public virtual DbSet<ForumSocialComment> ForumSocialComments { get; set; }
        public virtual DbSet<GroupInfo> GroupInfoes { get; set; }
        public virtual DbSet<ManagerEvent> ManagerEvents { get; set; }
        public virtual DbSet<Messaging> Messagings { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<PhotoAlbum> PhotoAlbums { get; set; }
        public virtual DbSet<PhotoLike> PhotoLikes { get; set; }
        public virtual DbSet<Photo> Photos { get; set; }
        public virtual DbSet<PostType> PostTypes { get; set; }
        public virtual DbSet<PostUserLike> PostUserLikes { get; set; }
        public virtual DbSet<QRCode> QRCodes { get; set; }
        public virtual DbSet<QRHistory> QRHistories { get; set; }
        public virtual DbSet<SocialForum> SocialForums { get; set; }
        public virtual DbSet<Sponsor> Sponsors { get; set; }
        public virtual DbSet<SponsorsEvent> SponsorsEvents { get; set; }
        public virtual DbSet<Sys_Log> Sys_Log { get; set; }
        public virtual DbSet<TextChat> TextChats { get; set; }
        public virtual DbSet<Theme> Themes { get; set; }
        public virtual DbSet<UserPackageType> UserPackageTypes { get; set; }
        public virtual DbSet<UserSession> UserSessions { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorsEvent> VendorsEvents { get; set; }
        public virtual DbSet<WidgetMapping> WidgetMappings { get; set; }
        public virtual DbSet<Widget> Widgets { get; set; }
        public virtual DbSet<WidgetType> WidgetTypes { get; set; }
        public virtual DbSet<Error_Logs> Error_Logs { get; set; }
        public virtual DbSet<UserNotification> UserNotifications { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Response> Responses { get; set; }
        public virtual DbSet<ResponseType> ResponseTypes { get; set; }
        public virtual DbSet<Survey> Surveys { get; set; }
        public virtual DbSet<SurveySubmittedFor> SurveySubmittedFors { get; set; }
        public virtual DbSet<TemplateQuestionOption> TemplateQuestionOptions { get; set; }
        public virtual DbSet<TemplateQuestion> TemplateQuestions { get; set; }
        public virtual DbSet<TemplateSurvey> TemplateSurveys { get; set; }
        public virtual DbSet<SocialCommentLike> SocialCommentLikes { get; set; }
        public virtual DbSet<WaiverFormMappingValue> WaiverFormMappingValues { get; set; }
        public virtual DbSet<WaiverFormTemplateMapping> WaiverFormTemplateMappings { get; set; }
        public virtual DbSet<ExhibitorActivity> ExhibitorActivities { get; set; }
        public virtual DbSet<SponsorActivity> SponsorActivities { get; set; }
        public virtual DbSet<VendorActivity> VendorActivities { get; set; }
        public virtual DbSet<EventVideo> EventVideos { get; set; }
        public virtual DbSet<EventInformation> EventInformations { get; set; }
        public virtual DbSet<ApplicationLog> ApplicationLogs { get; set; }
        public virtual DbSet<channelgroup> channelgroups { get; set; }
        public virtual DbSet<channelmessage> channelmessages { get; set; }
        public virtual DbSet<channel> channels { get; set; }
        public virtual DbSet<devicefcmtoken> devicefcmtokens { get; set; }
        public virtual DbSet<PhotoLike1> PhotoLike1 { get; set; }
        public virtual DbSet<userchannel> userchannels { get; set; }
        public virtual DbSet<UserChannelUnreadCount> UserChannelUnreadCounts { get; set; }
        public virtual DbSet<UserChatChannel> UserChatChannels { get; set; }
        public virtual DbSet<SysSetting> SysSettings { get; set; }
        public virtual DbSet<ApplicationAccessInfo> ApplicationAccessInfoes { get; set; }
    
        public virtual int DeleteEvent(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEvent", eventIDParameter);
        }
    
        public virtual int DeleteAttendee(Nullable<int> attendeeID)
        {
            var attendeeIDParameter = attendeeID.HasValue ?
                new ObjectParameter("AttendeeID", attendeeID) :
                new ObjectParameter("AttendeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAttendee", attendeeIDParameter);
        }
    
        public virtual int DeleteEventS(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEventS", eventIDParameter);
        }
    
        public virtual int DeleteExhibitor(Nullable<int> exhibitorID)
        {
            var exhibitorIDParameter = exhibitorID.HasValue ?
                new ObjectParameter("ExhibitorID", exhibitorID) :
                new ObjectParameter("ExhibitorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExhibitor", exhibitorIDParameter);
        }
    
        public virtual int DeleteSocialPosts(Nullable<int> socialforumID)
        {
            var socialforumIDParameter = socialforumID.HasValue ?
                new ObjectParameter("SocialforumID", socialforumID) :
                new ObjectParameter("SocialforumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSocialPosts", socialforumIDParameter);
        }
    
        public virtual int DeleteSponsor(Nullable<int> sponsorID)
        {
            var sponsorIDParameter = sponsorID.HasValue ?
                new ObjectParameter("SponsorID", sponsorID) :
                new ObjectParameter("SponsorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSponsor", sponsorIDParameter);
        }
    
        public virtual int DeleteVendor(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVendor", vendorIDParameter);
        }
    
        public virtual int DeleteGroups(Nullable<int> groupId, Nullable<int> eventID)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGroups", groupIdParameter, eventIDParameter);
        }
    
        public virtual int DeleteActivity(Nullable<int> activityID)
        {
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteActivity", activityIDParameter);
        }
    
        public virtual int DuplicateEvent(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DuplicateEvent", eventIDParameter);
        }
    
        public virtual int DuplicateSurveyTemplate(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DuplicateSurveyTemplate", iDParameter);
        }
    }
}
