@section Script{

    <script src="~/Scripts/twilio-chat.min.js"></script>
    <script src="~/Scripts/twilio-common.min.js"></script>
    <script src="~/Scripts/js/event-chat.js"></script>
    <!-- The core Firebase JS SDK is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/6.3.4/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/3.7.1/firebase-messaging.js"></script>

    <!-- TODO: Add SDKs for Firebase products that you want to use
         https://firebase.google.com/docs/web/setup#config-web-app -->
    @*<script>
            // Your web app's Firebase configuration
            var firebaseConfig = {
                apiKey: "AIzaSyB37wHNFiDucUPq1U-iIvjNjgWe_Ybs8aM",
                authDomain: "eventprojectios.firebaseapp.com",
                databaseURL: "https://eventprojectios.firebaseio.com",
                projectId: "eventprojectios",
                storageBucket: "eventprojectios.appspot.com",
                messagingSenderId: "759848246350",
                appId: "1:759848246350:web:17d6389a74d7b7d239371f",
                measurementId: "G-3VJH9M86HP"
            };
            // Initialize Firebase
            firebase.initializeApp(firebaseConfig);
        </script>*@
    

    <script>
        // Your web app's Firebase configuration
        var firebaseConfig = {
            apiKey: "AIzaSyCBVQoAGTG11qNhAOZATtflin_e6z1lTX4",
            authDomain: "eventapp-768e5.firebaseapp.com",
            databaseURL: "https://eventapp-768e5.firebaseio.com",
            projectId: "eventapp-768e5",
            storageBucket: "eventapp-768e5.appspot.com",
            messagingSenderId: "784979102180",
            appId: "1:784979102180:web:252a92e435b5ddf0579ff1",
            measurementId: "G-7FT5LMMMS1"
        };
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
    </script>
    <script>
        $(function () {
            var chatClient;
            var currentUser;
            var channelsList;
            var currentChannel;
            var currentChannelDOM;
            var $typePlaceholder = $('#typePlaceHolder');
            var lastMessageIndex;
            var messageLimit = 30;
            var currentChannelDPs = [];
            var attendeeDetails = [];
            var events = @Html.Raw(Json.Encode( ((List<EventManagement.DataAccess.DataBase.Model.Event >) ViewBag.events).Select(x=> new { id= x.ID, name = x.EventName }) ) );
            $.getJSON('@Url.Action("Token","chat")', {
                device: 'browser'
            }, function (data) {
                // Initialize the Chat client
                    currentUser = data.identity;
                    currentAdminID = data.id;
                Twilio.Chat.Client.create(data.token).then(client => {
                    console.log('Created chat client');
                    chatClient = client;

                    registerPushNotifications();

                    $('body').loading();
                    chatClient.getSubscribedChannels().then(createOrJoinGeneralChannel);
                    // getSubscribedChannels();

                    // Alert the user they have been assigned a random username
                    username = data.identity;

                }, function () {
                }).catch(error => {
                    console.error(error);
                });
                });


            function registerPushNotifications() {
                               if (firebase && firebase.messaging()) {
                              // requesting permission to use push notifications
                              firebase.messaging().requestPermission().then(() => {
                                // getting FCM token
                                firebase.messaging().getToken().then((fcmToken) => {
                                  // passing FCM token to the `chatClientInstance` to register for push notifications
                                chatClient.setPushRegistrationId('fcm', fcmToken);

                            // registering event listener on new message from firebase to pass it to the Chat SDK for parsing
                                firebase.messaging().onMessage(payload => {
                            //chatClient.handlePushNotification(payload);
                                      //const notificationTitle = 'Message Alert';
                                      //const notificationOptions = {
                                      //    body: payload.data.twi_body,
                                      //  icon: '/firebase-logo.png'
                                      //};

                                      //return self.registration.showNotification(notificationTitle,
                                      //    notificationOptions);
                                      
                                        var notificationOptions = {
                                                            body: payload.data.twi_body,
                                                            //icon: payload.notification.icon,
                                                            //click_action: payload.notification.click_action
                                                          };
                                        new Notification('New message', notificationOptions);
                                    });
                                }).catch((err) => {
                                  // can't get token
                                    var x = err;
                                });
                              }).catch((err) => {
                                  var x = 0;
                                // can't request permission or permission hasn't been granted to the web app by the user
                              });
                            } else {
                              // no Firebase library imported or Firebase library wasn't correctly initialized
                            }
            }

            function getSubscribedChannels() {

                $.getJSON('@Url.Action("GetAdminChannels","chat")', {
                }, createOrJoinGeneralChannel);
            }

            function onChannelClick() {
                onChannelSelected.call(this);
            };

            function onChannelSelected() {
                if (currentChannel) {
                removeChannelListeners(currentChannel);
                }
                if (currentChannelDOM) {
                    currentChannelDOM.removeClass("channel-selected");
                }
                var channel = $(this).data().channelID;
                currentChannelDOM = $(this);
                currentChannelDOM.find('.badge').remove();
                getChannelByID(channel);
                currentChannelDOM.addClass("channel-selected");
            }


            function createOrJoinGeneralChannel(channels) {
                var attendeeIds = _.map(channels.items, function (channel) {
                    var attendeeAttr = _.find(channel.attributes.GroupMembers, x => x.name !== 'Admin');
                    return attendeeAttr && attendeeAttr.id;
                });
                 @*$.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetAttendeesDetails", "Chat")',
                    dataType: 'json',
                    data: {attendeeIDs: attendeeIds},
                     success: function (data) {
                         attendeeDetails = data;
                         $('body').loading('stop');
                            fillChannels(channels);
                            chatClient.on("channelAdded", function (data) {
                                    if ( !_.any(data.items, c => c.sid === data.sid)  ) {
                                        addChannel(data);
                                    }
                            });
                    }
                 });*@
                getAttendeeDetails(attendeeIds,function (data) {
                         attendeeDetails = data;
                         $('body').loading('stop');
                            fillChannels(channels);
                    chatClient.on("channelAdded", function (data) {
                                // channelNameObj is nothing but reciever object
                                var channelNameObj = _.filter(data.attributes.GroupMembers, x => x.name !== 'Admin')[0];
                                var channelNameFromDb = _.find(attendeeDetails, function (attendee) {
                                    return attendee.ID === channelNameObj.id;
                                });
                                    if (!channelNameFromDb) {
                                        getAttendeeDetails([channelNameObj.id], function (attendeeData) {
                                           attendeeDetails = attendeeDetails.concat(attendeeData);
                                                      if ( !_.any(data.items, c => c.sid === data.sid)  ) {
                                                            addChannel(data);
                                                        }
                                          });
                                        return;
                                    }

                                    if ( !_.any(data.items, c => c.sid === data.sid)  ) {
                                        addChannel(data);
                                    }
                            });
                    });
            }

            function getAttendeeDetails(attendeeIds,success,failure) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetAttendeesDetails", "Chat")',
                    dataType: 'json',
                    data: {attendeeIDs: attendeeIds},
                    success: success,
                    failure: failure
                });
            }


            function fillChannels(channels) {
                var $channelContainer = $('.channels');
                $channelContainer.empty();
                _.forEach(channels.items, (c, index) => addChannel(c, index));
                $('.channel-Name').eq(0).click();
            }
            function addChannel(channel, index) {
                var channelNameObj = _.filter(channel.attributes.GroupMembers, x => x.name !== 'Admin')[0];
                var channelNameFromDb = _.find(attendeeDetails, function (attendee) {
                    return attendee.ID === channelNameObj.id;
                });
                if (!channelNameFromDb.EnableMessaging) { // To avoid showing channel div if enableMessaging is disabled
                    return;
                }
                var channelName = channelNameFromDb && channelNameFromDb.FirstName + ' ' + channelNameFromDb.Lastname;
                var uniqueName = channel.sid;
                var channelEventObj = _.find(events, function (data) { return data.id === channel.attributes.eventID });
                var channelEvent = channelEventObj && channelEventObj.name;
                var $channelContainer = $('.channels');
                var $channel = $('<div class="channel-Name">').append($('<div class="name">').text(channelName)).append($('<div class="event-name" >').text( 'Event : ' + channelEvent)).data('channelID', uniqueName).attr('dateUpdated', channel.lastMessage && channel.lastMessage.timestamp);
                $channel.click(onChannelClick);
                $channelContainer.append($channel);
                addUnConsumedMessages(channel, $channel.find(".name"));
                channel.on('messageAdded', function (message) {
                    addMessage(message, channel, $channel);
                    if (channel.sid === currentChannel.sid) {
                        currentChannel.setAllMessagesConsumed();

                    }
                     var channelDom = getChannelDomByID(message.channel.sid);
                            if (channelDom) {
                                $(channelDom).attr("dateUpdated", message.timestamp);
                            }
                             sortChannels();
                });
                sortChannels();
            }

            function removeChannelListeners(channel) {
                channel.removeListener('typingStarted', showTypingStarted);
                channel.removeListener('typingEnded', hideTypingStarted);
            }

            function setupChannel() {
                currentChannel.on('typingStarted', showTypingStarted);
                currentChannel.on('typingEnded', hideTypingStarted);
                currentChannel.on('channelUpdated', channelUpdated);
                var isChatEnabled = false;
                getAttendeeDPs(currentChannel.sid, function (data) {
                    currentChannelDPs = data.channelAttendeeImages;
                    isChatEnabled = data.isChatDisabled;
                    fillMessages();
                    $('#chat-input').prop("disabled", isChatEnabled);
                });
            }

            function addUnConsumedMessages(channel,channelDiv) {
                channel.getUnconsumedMessagesCount().then(function (data) {
                    channelDiv.find('.badge').remove()
                    if (data) {
                    channelDiv.append($('<span data-toggle="tooltip" title="3 New Messages" class="badge bg-red">').text(data));
                    }

                });

                channel.on('memberUpdated', function (member) {

                    var x = member;
                });
            }

            function fillMessages() {
                $('.direct-chat-messages').empty();
                if ( currentChannel.lastMessage && currentChannel.lastMessage.index > messageLimit) {
                    $('.direct-chat-messages').append( $('<div class="loadMore" >').text('Load more').click(loadMoreMessages) );
                }
                currentChannel.getMessages(messageLimit).then(function (data) {
                    lastMessageIndex = (data.items[0]).index-1;
                    _.forEach(data.items, x => addMessage(x, currentChannel));
                });
                currentChannel.setAllMessagesConsumed();
            }

            function loadMoreMessages() {
                $('.direct-chat-messages').find('.loadMore').remove();
                currentChannel.getMessages(messageLimit,lastMessageIndex).then(function (data) {
                    lastMessageIndex = (data.items[0]).index-1;
                    _.forEach(data.items.reverse(), x => addMessage(x, currentChannel, null, true));
                    $('.direct-chat-messages').prepend($('<div class="loadMore" >').text('Load more').click(loadMoreMessages));
                    $('.direct-chat-messages').scrollTop(0);
                });

            }

            function addMessage(message,channel,$channel,isLoadMoreMessages) {

                @*if (channel.sid !== currentChannel.sid) {
                    addUnConsumedMessages(channel, $channel.find(".name"));
                    return;
                }
                var isRight = message.author === currentUser;
                var rootImagePath = '@MvcCustom.RootImagePath()';
                var $messageContainer = $('<div>').addClass('direct-chat-msg');
                if (isRight) { $messageContainer.addClass('right'); }
                var $userDetails = $('<div>').addClass('direct-chat-info clearfix');
                $userDetails.append($('<span/>').addClass('direct-chat-name pull-left').text(message.attributes.DispalyName));
                $userDetails.append($('<span/>').addClass('direct-chat-timestamp pull-right').text(message.timestamp ));
                $messageContainer.append($userDetails);
                var senderID = message.attributes.senderID;

                var attendeeDpObj = _.find(currentChannelDPs, function (data) {
                    return data.AttendeeID === senderID;
                });*@
                if (channel.sid !== currentChannel.sid) {
                    addUnConsumedMessages(channel, $channel.find(".name"));
                    return;
                }
                var senderID = message.attributes.senderID;
                var attendeeDpObj = _.find(currentChannelDPs, function (data) {
                    return data.AttendeeID === senderID;
                });
                var isRight = message.author === currentUser;
                var rootImagePath = '@MvcCustom.RootImagePath()';
                var $messageContainer = $('<div>').addClass('direct-chat-msg');
                if (isRight) { $messageContainer.addClass('right'); }
                var $userDetails = $('<div>').addClass('direct-chat-info clearfix');
                $userDetails.append($('<span/>').addClass('direct-chat-name pull-left').text(attendeeDpObj && attendeeDpObj.FirstName + ' ' + attendeeDpObj.Lastname));
                $userDetails.append($('<span/>').addClass('direct-chat-timestamp pull-right').text(message.timestamp ));
                $messageContainer.append($userDetails);
                $messageContainer.append($('<img class="direct-chat-img"  alt="message user image">').attr('src', (attendeeDpObj && attendeeDpObj.image) ? 'data:image/png;base64,' + attendeeDpObj.image : 'Content/NoImage.png'));

                var $message = $('<div>').addClass('direct-chat-text').text(message.body);
                $messageContainer.append($message);
                if (!isLoadMoreMessages) {
                    $('.direct-chat-messages').append($messageContainer);
                } else {
                    $('.direct-chat-messages').prepend($messageContainer);
                }
                var $chatWindow = $('.direct-chat-messages');
                $chatWindow.scrollTop($chatWindow[0].scrollHeight);
            }


            var $input = $('#chat-input');
            $input.on('keydown', function (e) {
                currentChannel.typing();
                if (e.keyCode == 13  ) {
                    sendMessage();
                }
            });

            $('#send').on('click', function () {
                sendMessage();
            });


            function sendMessage() {
                if ($input.val()) {

                if (currentChannel === undefined) {
                        return;
                    }

                    $.ajax('@Url.Action("SendMessage1","chat")', {
                        type: "GET",
                        data: {
                            chatMessage: $input.val(),
                        channelID: currentChannel.sid,
                        adminID: currentAdminID,
                        eventID: currentChannel.attributes.eventID
                        },
                        global: false
                    }, function () {


                        });
                    // currentChannel.sendMessage($input.val());
                    $input.val('');
                    }
            }


            function getAttendeeDPs(channelID, success,failure) {
                $.getJSON('@Url.Action("GetChannelAttendeeImages","Chat")', {
                    channelID: channelID
                }, success, failure);
            }

            $('#newUser').click(function () {
                if (!$('#Attendee').val() || !$('#Event').val()) {
                    return;
                }
                $.getJSON('@Url.Action("CreateNewConversation","chat")' , {
                    ReceiverID: $('#Attendee').val(),
                    EventID: $('#Event').val()
                }, function (data) {
                        var channelDom = getChannelDomByID(data.channelID);
                        if (channelDom) {
                            onChannelSelected.apply(channelDom);
                        }
                        getChannelByID(data.channelID);
                });

            });

            function getChannelDomByID(channelID) {
                return _.filter($('.channel-Name'), function (dom) {
                            return $(dom).data()["channelID"] === channelID;
                        })[0];
            }

            function getChannelByID(channel) {
                return chatClient.getChannelByUniqueName(channel)
                    .then(function (channel) {
                        currentChannel = channel;
                        setupChannel();
                    }).catch(function () {
                        alert("Channel creation failed");
                    });
            }

            $("#Event").chosen().change(function () {

                $.ajax({
                    url: '@Url.Action("GetAttendees")?eventID=' + $("#Event").val(),
                    success: function (result) {

                        var mySelect = $('#Attendee');
                        mySelect.find('option').remove();
                        $.each(result, function (val, text) {
                            mySelect.append(
                                $('<option></option>').val(text.AttendeeID).html(text.FirstName)
                            );
                        });
                        mySelect.trigger("chosen:updated");

                    },
                    error: function (error) {
                        var mySelect = $('#Attendee');
                        mySelect.find('option').remove();
                        mySelect.trigger("chosen:updated");
                    }
                });
            });

                function showTypingStarted(member) {
                 $typePlaceholder.text(member.identity + ' is typing...');
                    }

            function hideTypingStarted(member) {
        $typePlaceholder.text('');
            }


            function channelUpdated() {

                alert('channel updated');

            }

            function sortChannels() {
                var channels = $('.channel-Name');

                channels.sort(function (a, b) {
                    return new Date($(b).attr('dateUpdated')) - new Date($(a).attr('dateUpdated'));
                    });
                channels.appendTo('.channels');
            }

            $("#Event").trigger("change");
        });
    </script>
}
<style>
    .flex {
        display: flex;
    }

    .channels {
        flex: 2 0;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        height: 500px;
    }

    .chat-container {
        flex: 6 0;
    }

    .channel-Name {
        min-height: 50px;
        /*align-items: center;*/
        font-weight: 600;
        cursor: pointer !important;
        /*display: flex;*/
        border-bottom: 1px solid #e0dede;
        padding-left: 10px;
        flex-direction: column;
    }

        .channel-Name:hover {
            background: white;
            user-select: none;
        }

        .channel-Name .name {
            margin-top: 3px;
        }

        .channel-Name .event-name {
            font-size: 10px;
            color: #8d8d90;
            margin-top: 3px;
        }


    .channel-selected {
        background: white;
    }
</style>

<div class="content-wrapper ">
    <div class="row" style="        padding: 5px">
        <div class="col-md-3">
            Event:
            @Html.DropDownList("EventID", new SelectList(ViewBag.events, "ID", "EventName"), new { id = "Event" })
        </div>
        <div class="col-md-3">
            Attendee:
            <select name="AttendeeID" required id="Attendee"></select>
        </div>
        <button id="newUser" style="padding: 5px"> Chat </button>
    </div>
    <br />

    <div class="flex">
        <div class="channels">

        </div>
        <div class="box box-danger direct-chat direct-chat-danger chat-container" id="EventChat">
            <div class="box-header with-border">
                <h3 class="box-title">Chat</h3>
                <h5 id="typePlaceHolder">  </h5>
                <div class="box-tools pull-right">

                </div>
            </div>
            <!-- /.box-header -->
            <div class="box-body">
                <!-- Conversations are loaded here -->
                <div class="direct-chat-messages" style="        height: 365px">

                </div>
                <!--/.direct-chat-messages-->
                <!-- Contacts are loaded here -->
                <div class="direct-chat-contacts">
                    <ul class="contacts-list">
                        <li>
                            <a href="#">
                                <img class="contacts-list-img" src="../dist/img/user1-128x128.jpg" alt="Contact Avatar">
                                <div class="contacts-list-info">
                                    <span class="contacts-list-name">
                                        Count Dracula
                                        <small class="contacts-list-date pull-right">2/28/2015</small>
                                    </span>
                                    <span class="contacts-list-msg">How have you been? I was...</span>
                                </div>
                                <!-- /.contacts-list-info -->
                            </a>
                        </li>
                        <!-- End Contact Item -->
                    </ul>
                    <!-- /.contatcts-list -->
                </div>
                <!-- /.direct-chat-pane -->
            </div>
            <!-- /.box-body -->
            <div class="box-footer">
                <div class="input-group">
                    <input id="chat-input" type="text" name="message" placeholder="Type Message ..." class="form-control">
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-danger btn-flat" id="send">Send</button>
                    </span>
                </div>
            </div>
            <!-- /.box-footer-->
        </div>
    </div>
</div>
